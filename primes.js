const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];                          // create an arraydocument.write("<b>ORIGINAL ARRAY</b><br>", nums, "<br><br>");     // print the elements of our arraydocument.write("<b>SORTED ARRAY OF PRIMES IN ARRAY</b><br>", primes(nums), "<br><br>");   // print the primes of the arraydocument.write("<b>PRIME FACTORS OF NUMBERS IN ARRAY</b><br>");var factors = factors(nums);                                       // call the factors function, assign to factors arrayfor (var i = 0; i < factors.length; i++)                            // move through each element of the array{    document.write(nums[i], ": ", factors[i], "<br>");              // print the prime factors of the array  }/***************************************************************************************************************************************** primes()* Accepts an array of numbers and finds all prime numbers from that array.* Returns them in a sorted array.****************************************************************************************************************************************/function primes(numbers) {    var primeNums = new Array();                          // array to hold primes    var k = 0;                                            // used for element placement into primeNums array    for (var i = 0; i < numbers.length; i++)               // move through all elements of the original array    {        var isPrime = true;                               // acts as a flag to mark number as prime        if (numbers[i] == 0)                              // checks if element value is zero        {            isPrime = false;                              // if zero, then not prime        }        else                                              // if not zero, execute this block        {            for (var j = 2; j < numbers[i]; j++)          // move though all possible factors of the number, excluding 1 and itself            {                if (numbers[i] % j == 0)                  // checks if remander is zero                 {                    isPrime = false;                      // if remainder is zero, number is not prime                    break;                                // break from loop if not prime                }            }        }        if (isPrime)                                     // checks condition        {            primeNums[k] = numbers[i];                   // adds number to the arrat if it is prime            k++;                                         // increment to the next element of primeNums array        }    }    primeNums.sort();                                    // sort the array     return primeNums;                                    // return the array}/****************************************************************************************************************************************** factors()* Accepts an array of numbers and finds all prime factors for each of the numbers from that array.* Returns them as a 2 dimensional array.*****************************************************************************************************************************************/function factors(numbers) {    var factor = new Array();                           // array to hold arrays of prime factors    for (var i = 0; i < numbers.length; i++)             // moves through each element of the original array    {        var temp = new Array();                         // holds factors to be passed to primes function               var k = 0;                                      // used for element placement into temp array        for (var j = 1; j <= numbers[i]; j++)           // moves through possible factor candidates        {            if (numbers[i] % j == 0)                    // checks if candidate meets factor condition            {                temp[k] = j;                            // add to temp array                k++;                                    // increment to next element in temp array            }        }        factor[i] = primes(temp);                       // pass temp array to primes function, then assign to factor array    }    return factor;                                      // return 2 dimensional array }